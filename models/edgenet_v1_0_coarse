import torch
import torch.nn as nn
from torch.nn import functional as F

from pathlib import Path

from .modules import ResBlock_FullPreActivation as ResBlock

class EdgeNet(nn.Module):
	def __init__(self):
		super(EdgeNet, self).__init__()

		self.conv1 = nn.Conv3d(1, 8, 3, padding=1)
		self.res1 = ResBlock(8, 8)

		self.pool1 = nn.MaxPool3d(2,2)
		self.conv2 = nn.Conv3d(8, 16, 3, padding=1)
		self.res2 = ResBlock(16, 16)

		self.pool2 = nn.MaxPool3d(2,2)
		self.conv3 = nn.Conv3d(16, 32, 3, padding=1)
		self.res3 = ResBlock(32, 32)

		self.pool3 = nn.MaxPool3d(2,2)
		self.conv4 = nn.Conv3d(32, 64, 3, padding=1)
		self.res4 = ResBlock(64, 64, dilation=2)
		self.res5 = ResBlock(64, 64, dilation=2)

		self.pool4 = nn.MaxPool3d(2,2)
		self.conv5 = nn.Conv3d(64, 128, 3, padding=1)
		self.res6 = ResBlock(128, 128, dilation=2)
		self.res7 = ResBlock(128, 128, dilation=2)
		self.up1 = nn.ConvTranspose3d(128, 64, 2, 2)

		self.conv6 = nn.Conv3d(128, 64, 3, padding=1)
		self.res8 = ResBlock(64, 64, dilation=2)
		self.res9 = ResBlock(64, 64, dilation=2)
		self.up2 = nn.ConvTranspose3d(64, 32, 2, 2)

		self.conv7 = nn.Conv3d(64, 32, 3, padding=1)
		self.res10 = ResBlock(32, 32)
		
		# coarse label
		self.conv7_1 = nn.Conv3d(32, 16, 3, padding=1)
		self.res10_1 = ResBlock(16, 16)
		self.conv7_2 = nn.Conv3d(16, 5, 1)

		self.conv8 = nn.Conv3d(32+16+5, 16, 1) # with final concat
		self.conv9 = nn.Conv3d(16, 16, 1)
		self.conv10 = nn.Conv3d(16, 12, 1)

	def forward(self, x):

		y = self.conv1(x)
		y = self.res1(y)

		y = self.pool1(y)
		y = self.conv2(y)
		y = self.res2(y)

		y = self.pool2(y) # skip connection
		y1 = self.conv3(y)
		y1 = self.res3(y1) # skip connection

		y2 = self.pool3(y1)
		y2 = self.conv4(y2)
		y2 = self.res4(y2)
		y2 = self.res5(y2) # skip connection

		y3 = self.pool4(y2)
		y3 = self.conv5(y3)
		y3 = self.res6(y3)
		y3 = self.res7(y3)
		y3 = self.up1(y3)

		# decoder
		# print(y2.shape, y3.shape)
		y3 = torch.cat((y2,y3), dim=1)
		y3 = self.conv6(y3)
		y3 = self.res8(y3)
		y3 = self.res9(y3)
		y3 = self.up2(y3)

		# print(y1.shape, y3.shape)
		y3 = torch.cat((y1,y3), dim=1)
		y3 = self.conv7(y3)
		y3 = self.res10(y3)

		# coarse label
		y4 = self.conv7_1(y3)
		y4 = self.res10_1(y4)
		y4 = self.conv7_2(y4)


		# print(y.shape, y3.shape)
		y3 = torch.cat((y,y3,y4), dim=1) # with final concat
		y3 = self.conv8(y3)
		y3 = F.relu(y3, inplace=True)
		y3 = self.conv9(y3)
		y3 = F.relu(y3, inplace=True)
		y3 = self.conv10(y3)

		# return y3
		# return y4
		return y3, y4

	# def fuse_model(self, is_qat=False):
	# 	fuse_modules = torch.ao.quantization.fuse_modules_qat if is_qat else torch.ao.quantization.fuse_modules

	# 	for idx, m in enumerate(self.modules()):
	# 		if type(m) == ResBlock:
	# 			fuse_modules(m, ['conv1', 'bn2'], inplace=True)

def get_edgenet():
	return EdgeNet(),\
			"vanilla edgenet, ResBlock_FullPreActivation; WITH final concat; coarse labels",\
			Path(__file__).name
